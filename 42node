const mongoose = require('mongoose');
const connectionString = 'YOUR_CONNECTION_STRING';

mongoose.connect(connectionString, {
 useNewUrlParser: true,
 useUnifiedTopology: true,
 useCreateIndex: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', () => {
 console.log('Connected to MongoDB');
});


const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
 username: { type: String, required: true, unique: true },
 password: { type: String, required: true },
 firstName: { type: String, required: true },
 lastName: { type: String, required: true },
 active: { type: Boolean, default: false },
});

UserSchema.methods.comparePassword = function (password) {
 return bcrypt.compare(password, this.password);
};

UserSchema.pre('save', function (next) {
 if (this.isModified('password')) {
    this.password = bcrypt.hash(this.password, 10);
 }
 next();
});

const User = mongoose.model('User', UserSchema);

module.exports = User;



const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const User = require('./models/User');

passport.use(
 new LocalStrategy({ usernameField: 'username' }, (username, password, done) => {
    User.findOne({ username: username.toLowerCase() }, (err, user) => {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, { message: 'Incorrect username.' });
      }
      if (!user.active) {
        return done(null, false, { message: 'Account not activated.' });
      }
      if (!user.comparePassword(password)) {
        return done(null, false, { message: 'Incorrect password.' });
      }
      return done(null, user);
    });
 })
);

passport.serializeUser((user, done) => {
 done(null, user.id);
});

passport.deserializeUser((id, done) => {
 User.findById(id, (err, user) => {
    done(err, user);
 });
});

module.exports = passport;















